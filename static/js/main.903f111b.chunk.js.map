{"version":3,"sources":["components/Header/Header.module.css","components/NewRecord/NewRecord.module.css","components/Header/Header.js","components/Header/HeaderContainer.js","components/NewRecord/NewRecord.js","api/crudAPI.js","redux/crud-reducer.js","components/NewRecord/NewRecordContainer.js","components/Records/Record/Record.js","components/Records/Record/RecordForm.js","components/Records/Record/RecordContainer.js","components/Records/Records.js","redux/selectors.js","components/Records/RecordsContainer.js","App.js","redux/store.js","index.js","components/Records/Record/Record.module.css","components/Records/Records.module.css"],"names":["module","exports","Header","className","s","header","HeaderContainer","reduxForm","form","handleSubmit","newRecord","onSubmit","Field","component","type","name","placeholder","autoFocus","instance","axios","baseURL","withCredentials","crudAPI","get","record","put","data","id","delete","post","initialState","records","crudReducer","state","action","filter","item","_id","map","editMode","isEditMode","addRecord","deleteRecord","updateRecord","toggleEditMode","mapDispatchToProps","requestAddRecord","dispatch","a","res","status","reset","connect","onFormSubmit","formData","Record","setEditMode","onDeleteRecord","Email","Age","buttons","onClick","RecordForm","requestDeleteRecord","requestUpdateRecord","RecordReduxForm","initialValues","Records","titles","key","getRecords","crud","requestRecords","useEffect","App","reducers","combineReducers","formReducer","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,OAAS,yB,oBCA3BD,EAAOC,QAAU,CAAC,UAAY,+B,iMCUfC,EARA,WACX,OACI,4BAAQC,UAAWC,IAAEC,QACjB,0CCGGC,EANS,WACpB,OACI,kBAAC,EAAD,O,6DCyBOC,cAAU,CACrBC,KAAM,aADKD,EA1BG,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,aACjB,OACI,0BACIN,UAAWC,IAAEM,UACbC,SAAUF,GAEV,kBAACG,EAAA,EAAD,CACIC,UAAU,QACVC,KAAK,OACLC,KAAK,QACLC,YAAY,QACZC,WAAS,IAEb,kBAACL,EAAA,EAAD,CACIC,UAAU,QACVC,KAAK,OACLC,KAAK,MACLC,YAAY,QAEhB,4BACIF,KAAK,UADT,sB,iBCrBNI,E,OAAWC,OAAa,CAC1BC,QAAS,2CACTC,iBAAiB,IAGRC,EAAU,WAEf,OAAOJ,EAASK,IAAI,KAFfD,EAAU,SAITE,GACN,OAAON,EAASO,IAAI,GAAI,CAACC,KAAMF,KAL1BF,EAAU,SAONK,GACT,OAAOT,EAASU,OAAOD,IARlBL,EAAU,SAUNK,EAAIH,GACb,OAAON,EAASW,KAAKF,EAAI,CAACD,KAAMF,KCRlCM,EAAe,CACjBC,QAAS,MAiDEC,EA9CK,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCAClD,OAAQA,EAAOpB,MACX,IAdY,mBAeR,OAAO,eACAmB,EADP,CAEIF,QAASG,EAAOH,UAExB,IAlBW,kBAmBP,OAAO,eACAE,EADP,CAEIF,QAAQ,GAAD,mBACAE,EAAMF,SADN,CAEHG,EAAOV,WAGnB,IAzBc,qBA0BV,OAAO,eACAS,EADP,CAEIF,QAASE,EAAMF,QAAQI,QAAO,SAAAC,GAC1B,OAAOA,EAAKC,MAAQH,EAAOP,QAGvC,IA/Bc,qBAgCV,OAAO,eACAM,EADP,CAEIF,QAASE,EAAMF,QAAQO,KAAI,SAAAF,GACvB,OAAOA,EAAKC,MAAQH,EAAOP,GAApB,eACIS,EADJ,CACUV,KAAMQ,EAAOV,SACxBY,OAGlB,IAvCiB,wBAwCb,OAAO,eACAH,EADP,CAEIF,QAASE,EAAMF,QAAQO,KAAI,SAAAF,GACnB,OAAOA,EAAKC,MAAQH,EAAOP,GAApB,eACIS,EADJ,CACUG,SAAUL,EAAOM,aAD3B,eAEIJ,EAFJ,CAEUG,UAAU,SAI3C,QACI,OAAON,IAYNQ,EAAY,SAACjB,GAAD,MAAa,CAClCV,KAlEe,kBAmEfU,WAGSkB,EAAe,SAACf,GAAD,MAAS,CACjCb,KAtEkB,qBAuElBa,OAGSgB,EAAe,SAAChB,EAAIH,GAAL,MAAiB,CACzCV,KA1EkB,qBA2ElBa,KACAH,WAGSoB,EAAiB,SAACjB,EAAIa,GAAL,MAAqB,CAC/C1B,KA/EqB,wBAgFrBa,KACAa,e,OCnEEK,EAAqB,CACvBC,iBD2E4B,SAACtB,GAAD,8CAAY,WAAOuB,GAAP,eAAAC,EAAA,sEACtB1B,EAAkBE,GADI,OAEzB,OADTyB,EADkC,QAEpCC,QAAkBH,EAASN,EAAUQ,EAAIvB,OAFL,2CAAZ,uDC1E5ByB,M,MAAAA,GAGWC,cAAQ,KAAMP,EAAdO,EAnBY,SAAC,GAAiC,IAA/BN,EAA8B,EAA9BA,iBAAkBK,EAAY,EAAZA,MAEtCE,EAAY,uCAAG,WAAOC,GAAP,SAAAN,EAAA,sEACXF,EAAiBQ,GADN,OAEjBH,EAAM,aAFW,2CAAH,sDAKlB,OACI,kBAAC,EAAD,CACIxC,SAAU0C,O,iBCMPE,EAlBA,SAAC,GAA6C,IAA3C/B,EAA0C,EAA1CA,OAAQgC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,eAEnC,OACI,uBAAGtD,UAAWC,IAAEoB,QACZ,8BAAOA,GAAUA,EAAOkC,OACxB,8BAAOlC,GAAUA,EAAOmC,KACxB,0BAAMxD,UAAWC,IAAEwD,SACf,4BACIC,QAAS,kBAAML,GAAY,KAD/B,QAGA,4BACIK,QAASJ,GADb,aC2BDK,EApCI,SAAC,GAAmC,IAAjCN,EAAgC,EAAhCA,YAAa/C,EAAmB,EAAnBA,aAE/B,OACI,0BACIN,UAAWC,IAAEoB,OACbb,SAAUF,GAEV,8BACI,kBAACG,EAAA,EAAD,CACIC,UAAU,QACVC,KAAK,OACLC,KAAK,QACLC,YAAY,QACZC,WAAS,KAGjB,8BACI,kBAACL,EAAA,EAAD,CACIC,UAAU,QACVC,KAAK,OACLC,KAAK,MACLC,YAAY,SAGpB,0BAAMb,UAAWC,IAAEwD,SACf,4BACI9C,KAAK,UADT,QAGA,4BACI+C,QAAS,kBAAML,GAAY,KAD/B,aCYVX,EAAqB,CACvBkB,oBJwD+B,SAACpC,GAAD,8CAAQ,WAAOoB,GAAP,SAAAC,EAAA,sEACrB1B,EAAqBK,GADA,OAExB,MAFwB,OAEnCuB,QAAkBH,EAASL,EAAaf,IAFL,2CAAR,uDIvD/BiB,iBACAoB,oBJ2D+B,SAACrC,EAAIH,GAAL,8CAAgB,WAAOuB,GAAP,SAAAC,EAAA,sEAC7B1B,EAAqBK,EAAIH,GADI,cAE/CuB,EAASJ,EAAahB,EAAIH,IAC1BuB,EAASH,EAAejB,GAAI,IAHmB,2CAAhB,wDIxDpByB,eATS,SAACnB,GAAD,MAAY,KASIY,EAAzBO,EAzCS,SAAC,GACgC,IAD9BzB,EAC6B,EAD7BA,GAAIH,EACyB,EADzBA,OAAQuC,EACiB,EADjBA,oBACnCnB,EAAoD,EAApDA,eAAgBL,EAAoC,EAApCA,SAAUyB,EAA0B,EAA1BA,oBAEpBR,EAAc,SAAChB,GACjBI,EAAejB,EAAIa,IAWjByB,EAAkB1D,YAAU,CAC9BC,KAAK,aAAD,OAAemB,IADCpB,CAErBuD,GAEH,OAAOvB,EACD,kBAAC0B,EAAD,CACEC,cAAe1C,EACfgC,YAAaA,EACb7C,SAZe,SAAC2C,GACpBU,EAAoBrC,EAAI2B,MAatB,kBAAC,EAAD,CACE9B,OAAQA,EACRgC,YAAaA,EACbC,eArBe,WACnBM,EAAoBpC,S,iBCYbwC,EAzBC,SAAC,GAAiB,IAAfpC,EAAc,EAAdA,QAEf,OACI,yBAAK5B,UAAWC,IAAE2B,SACd,yBAAK5B,UAAWC,IAAEgE,QACd,qCACA,mCACA,wCAEJ,4BACKrC,GAAWA,EAAQO,KAChB,gBAAGD,EAAH,EAAGA,IAAKX,EAAR,EAAQA,KAAMa,EAAd,EAAcA,SAAd,OAA6B,4BACzB,kBAAC,EAAD,CACI8B,IAAKhC,EACLV,GAAIU,EACJb,OAAQE,EACRa,SAAUA,WCpBzB+B,EAAa,SAACrC,GAAD,OAAWA,EAAMsC,KAAKxC,SCwB1Cc,EAAqB,CACvB2B,ePkE0B,yDAAM,WAAOzB,GAAP,eAAAC,EAAA,sEACd1B,IADc,OAEjB,OADT2B,EAD0B,QAE5BC,QAAkBH,EA9Bc,CACpCjC,KA9DgB,mBA+DhBiB,QA4B0CkB,EAAIvB,OAFd,2CAAN,wDO/Df0B,eARS,SAACnB,GAAD,MAAY,CAChCF,QAASuC,EAAWrC,MAOgBY,EAAzBO,EArBU,SAAC,GAAiC,IAA/BrB,EAA8B,EAA9BA,QAASyC,EAAqB,EAArBA,eAMjC,OAJAC,qBAAU,WACND,MACD,IAGC,kBAAC,EAAD,CACIzC,QAASA,OCCN2C,MAVf,WACE,OACE,yBAAKvE,UAAU,cACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,yBCNAwE,EAAWC,YAAgB,CAC7BL,KAAMvC,EACNxB,KAAMqE,MAGJC,EAAQC,YAAYJ,EAAUK,YAAgBC,MACpDC,OAAOJ,MAAQA,EAEAA,QCLfK,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,EAAD,QAGJQ,SAASC,eAAe,U,mBCb1BvF,EAAOC,QAAU,CAAC,OAAS,uBAAuB,QAAU,0B,mBCA5DD,EAAOC,QAAU,CAAC,OAAS,wBAAwB,QAAU,4B","file":"static/js/main.903f111b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__Ncu4J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newRecord\":\"NewRecord_newRecord__2NvWk\"};","import React from 'react'\r\nimport s from './Header.module.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={s.header}>\r\n            <h1>Crud App</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport Header from './Header'\r\n\r\nconst HeaderContainer = () => {\r\n    return (\r\n        <Header />\r\n    )\r\n}\r\n\r\nexport default HeaderContainer","import React from 'react'\r\nimport { reduxForm, Field } from 'redux-form'\r\nimport s from './NewRecord.module.css'\r\n\r\nconst NewRecord = ({ handleSubmit }) => {\r\n    return (\r\n        <form\r\n            className={s.newRecord}\r\n            onSubmit={handleSubmit}\r\n        >\r\n            <Field\r\n                component='input'\r\n                type='text'\r\n                name='Email'\r\n                placeholder='Email'\r\n                autoFocus\r\n            />\r\n            <Field\r\n                component='input'\r\n                type='text'\r\n                name='Age'\r\n                placeholder='Age'\r\n            />\r\n            <button\r\n                type='submit'\r\n            >Add new record</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({\r\n    form: 'newRecord'\r\n})(NewRecord)","import * as axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://178.128.196.163:3000/api/records/',\r\n    withCredentials: true\r\n})\r\n\r\nexport const crudAPI = {\r\n    getRecords() {\r\n        return instance.get('')\r\n    },\r\n    addRecord(record) {\r\n        return instance.put('', {data: record})\r\n    },\r\n    deleteRecord(id) {\r\n        return instance.delete(id)\r\n    },\r\n    updateRecord(id, record) {\r\n        return instance.post(id, {data: record})\r\n    }   \r\n}","import { crudAPI } from \"../api/crudAPI\"\r\n\r\nconst GET_RECORDS = 'crud/GET_RECORDS'\r\nconst ADD_RECORD = 'crud/ADD_RECORD'\r\nconst DELETE_RECORD = 'crud/DELETE_RECORD'\r\nconst UPDATE_RECORD = 'crud/UPDATE_RECORD'\r\nconst TOGGLE_EDIT_MODE = 'crud/TOGGLE_EDIT_MODE'\r\n\r\n\r\n\r\nconst initialState = {\r\n    records: null\r\n}\r\n\r\nconst crudReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_RECORDS:\r\n            return {\r\n                ...state,\r\n                records: action.records\r\n            }\r\n        case ADD_RECORD:\r\n            return {\r\n                ...state,\r\n                records: [\r\n                    ...state.records,\r\n                    action.record\r\n                ]\r\n            }\r\n        case DELETE_RECORD:\r\n            return {\r\n                ...state,\r\n                records: state.records.filter(item => {\r\n                    return item._id !== action.id\r\n                })\r\n            }\r\n        case UPDATE_RECORD:\r\n            return {\r\n                ...state,\r\n                records: state.records.map(item => {\r\n                    return item._id === action.id\r\n                        ? { ...item, data: action.record }\r\n                        : item\r\n                })\r\n            }\r\n        case TOGGLE_EDIT_MODE:\r\n            return {\r\n                ...state,\r\n                records: state.records.map(item => {\r\n                        return item._id === action.id\r\n                            ? { ...item, editMode: action.isEditMode }\r\n                            : { ...item, editMode: false }\r\n                    }\r\n                )\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default crudReducer\r\n\r\n\r\nexport const getRecords = (records) => ({\r\n    type: GET_RECORDS,\r\n    records\r\n})\r\n\r\nexport const addRecord = (record) => ({\r\n    type: ADD_RECORD,\r\n    record\r\n})\r\n\r\nexport const deleteRecord = (id) => ({\r\n    type: DELETE_RECORD,\r\n    id\r\n})\r\n\r\nexport const updateRecord = (id, record) => ({\r\n    type: UPDATE_RECORD,\r\n    id,\r\n    record\r\n})\r\n\r\nexport const toggleEditMode = (id, isEditMode) => ({\r\n    type: TOGGLE_EDIT_MODE,\r\n    id,\r\n    isEditMode\r\n})\r\n\r\n\r\nexport const requestRecords = () => async (dispatch) => {\r\n    const res = await crudAPI.getRecords()\r\n    res.status === 200 && dispatch(getRecords(res.data))\r\n}\r\n\r\nexport const requestAddRecord = (record) => async (dispatch) => {\r\n    const res = await crudAPI.addRecord(record)\r\n    res.status === 200 && dispatch(addRecord(res.data))\r\n}\r\n\r\nexport const requestDeleteRecord = (id) => async (dispatch) => {\r\n    const res = await crudAPI.deleteRecord(id)\r\n    res.status === 200 && dispatch(deleteRecord(id))\r\n}\r\n\r\nexport const requestUpdateRecord = (id, record) => async (dispatch) => {\r\n    const res = await crudAPI.updateRecord(id, record)\r\n    dispatch(updateRecord(id, record))\r\n    dispatch(toggleEditMode(id, false))\r\n}","import React from 'react'\r\nimport NewRecord from './NewRecord'\r\nimport { requestAddRecord } from '../../redux/crud-reducer'\r\nimport { connect } from 'react-redux'\r\nimport { reset } from 'redux-form'\r\n\r\nconst NewRecordContainer = ({ requestAddRecord, reset }) => {\r\n\r\n    const onFormSubmit = async (formData) => {\r\n        await requestAddRecord(formData)\r\n        reset('newRecord')\r\n    }\r\n\r\n    return (\r\n        <NewRecord\r\n            onSubmit={onFormSubmit}\r\n        />\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    requestAddRecord,\r\n    reset\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(NewRecordContainer)","import React from 'react'\r\nimport s from './Record.module.css'\r\n\r\nconst Record = ({ record, setEditMode, onDeleteRecord }) => {\r\n\r\n    return (\r\n        <p className={s.record}>\r\n            <span>{record && record.Email}</span>\r\n            <span>{record && record.Age}</span>\r\n            <span className={s.buttons}>\r\n                <button\r\n                    onClick={() => setEditMode(true)}\r\n                >Edit</button>\r\n                <button\r\n                    onClick={onDeleteRecord}\r\n                >Delete</button>\r\n            </span>\r\n        </p>\r\n    )\r\n}\r\n\r\nexport default Record","import React from 'react'\r\nimport { Field } from 'redux-form'\r\nimport s from './Record.module.css'\r\n\r\nconst RecordForm = ({ setEditMode, handleSubmit }) => {\r\n\r\n    return (\r\n        <form\r\n            className={s.record}\r\n            onSubmit={handleSubmit}\r\n        >\r\n            <span>\r\n                <Field\r\n                    component='input'\r\n                    type='text'\r\n                    name='Email'\r\n                    placeholder='Email'\r\n                    autoFocus\r\n                />\r\n            </span>\r\n            <span>\r\n                <Field\r\n                    component='input'\r\n                    type='text'\r\n                    name='Age'\r\n                    placeholder='Age'\r\n                />\r\n            </span>\r\n            <span className={s.buttons}>\r\n                <button\r\n                    type='submit'\r\n                >Save</button>\r\n                <button\r\n                    onClick={() => setEditMode(false)}\r\n                >Cancel</button>\r\n            </span>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default RecordForm","import React, { useState } from 'react'\r\nimport Record from './Record'\r\nimport RecordForm from './RecordForm'\r\nimport { requestDeleteRecord,\r\n    toggleEditMode, requestUpdateRecord } from '../../../redux/crud-reducer'\r\nimport { connect } from 'react-redux'\r\nimport { reduxForm } from 'redux-form'\r\n\r\n\r\nconst RecordContainer = ({ id, record, requestDeleteRecord,\r\n    toggleEditMode, editMode, requestUpdateRecord }) => {\r\n\r\n    const setEditMode = (isEditMode) => {\r\n        toggleEditMode(id, isEditMode)\r\n    }\r\n\r\n    const onDeleteRecord = () => {\r\n        requestDeleteRecord(id)\r\n    }\r\n\r\n    const onUpdateRecord = (formData) => {\r\n        requestUpdateRecord(id, formData)\r\n    }\r\n\r\n    const RecordReduxForm = reduxForm({\r\n        form: `editRecord${id}`\r\n    })(RecordForm)\r\n\r\n    return editMode\r\n        ? <RecordReduxForm\r\n            initialValues={record}\r\n            setEditMode={setEditMode}\r\n            onSubmit={onUpdateRecord}\r\n        />\r\n        : <Record\r\n            record={record}\r\n            setEditMode={setEditMode}\r\n            onDeleteRecord={onDeleteRecord}\r\n        />\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    requestDeleteRecord,\r\n    toggleEditMode,\r\n    requestUpdateRecord\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RecordContainer)","import React from 'react'\r\nimport RecordContainer from './Record/RecordContainer'\r\nimport s from './Records.module.css'\r\n\r\nconst Records = ({ records }) => {\r\n\r\n    return (\r\n        <div className={s.records}>\r\n            <div className={s.titles}>\r\n                <h3>Email</h3>\r\n                <h3>Age</h3>\r\n                <h3>Actions</h3>\r\n            </div>\r\n            <ul>\r\n                {records && records.map(\r\n                    ({ _id, data, editMode }) => <li>\r\n                        <RecordContainer\r\n                            key={_id}\r\n                            id={_id}\r\n                            record={data}\r\n                            editMode={editMode}\r\n                        />\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Records","export const getRecords = (state) => state.crud.records","import React, { useEffect } from 'react'\r\nimport Records from './Records'\r\nimport { requestRecords } from '../../redux/crud-reducer'\r\nimport { getRecords } from '../../redux/selectors'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nconst RecordsContainer = ({ records, requestRecords }) => {\r\n\r\n    useEffect(() => {\r\n        requestRecords()\r\n    }, [])\r\n\r\n    return (\r\n        <Records\r\n            records={records}\r\n        />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    records: getRecords(state)\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    requestRecords\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RecordsContainer)","import React from 'react'\nimport './App.css'\nimport HeaderContainer from './components/Header/HeaderContainer'\nimport NewRecordContainer from './components/NewRecord/NewRecordContainer'\nimport RecordsContainer from './components/Records/RecordsContainer'\n\nfunction App() {\n  return (\n    <div className='appWrapper'>\n      <HeaderContainer />\n      <NewRecordContainer />\n      <RecordsContainer />\n    </div>\n  )\n}\n\nexport default App\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport crudReducer from './crud-reducer'\r\nimport { reducer as formReducer } from 'redux-form'\r\n\r\nconst reducers = combineReducers({\r\n    crud: crudReducer,\r\n    form: formReducer\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk))\r\nwindow.store = store\r\n\r\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"record\":\"Record_record__2jsIB\",\"buttons\":\"Record_buttons__2YFHz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titles\":\"Records_titles__3SxOO\",\"records\":\"Records_records__3PzDB\"};"],"sourceRoot":""}